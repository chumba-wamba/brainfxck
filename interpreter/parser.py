from interpreter import op_dict, op_list
from interpreter.token import Token
from interpreter.lexer import Lexer
from interpreter.syntax_analyser import SyntaxAnalyser
from typing import List


class Parser:
    """
        Responsible for consuming the stream of tokens generated
        by the lexer and to evaluate/interpret it to the output to
        be generated by the brainfxck code. 

            Attributes:
                token_stream : List[Token]
                    the stream of tokens generated by the lexer.
                tape_size : int
                    the number of blocks in the brainfxck tape.
                    default -> 1000

            Methods:
                parse()
                    evaluates/interprets the token stream.
    """

    def __init__(self, token_stream: List[Token], tape_size: int = 1000) -> None:
        """
            Constructor method to store the token stream as an instance variable.

            Parameters:
                token_stream : List[Token]
                    the stream of tokens generated by the lexer.
                tape_size : int
                    the number of blocks in the brainfxck tape.
                    default -> 1000

            Returns:
                None
        """

        self.token_stream = token_stream
        self.tape = [0 for i in range(tape_size)]
        self.tape_ptr = 0

    def parse(self):
        pass
